(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(n),m=a,d=u["".concat(o,".").concat(m)]||u[m]||p[m]||r;return n?i.a.createElement(d,l(l({ref:t},c),{},{components:n})):i.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),r=(n(0),n(114)),o={id:"overview",title:"Overview"},l={unversionedId:"overview",id:"overview",isDocsHomePage:!0,title:"Overview",description:"What is Antlir?",source:"@site/docs/overview.md",slug:"/",permalink:"/antlir/docs/",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/overview.md",version:"current",sidebar:"docs",next:{title:"Getting Started",permalink:"/antlir/docs/getting_started"}},s=[{value:"What is Antlir?",id:"what-is-antlir",children:[]},{value:"Easy, maintainable, efficient image deployment",id:"easy-maintainable-efficient-image-deployment",children:[]},{value:"Reproducibility",id:"reproducibility",children:[{value:"Benefits of reproducibly built images",id:"benefits-of-reproducibly-built-images",children:[]}]},{value:"Pre-built artifacts",id:"pre-built-artifacts",children:[]},{value:"Bonus features of Antlir",id:"bonus-features-of-antlir",children:[]},{value:"What Antlir cannot (yet?) do",id:"what-antlir-cannot-yet-do",children:[]},{value:"Footnotes",id:"footnotes",children:[]}],c={toc:s};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"what-is-antlir"},"What is Antlir?"),Object(r.b)("p",null,"Antlir can ",Object(r.b)("strong",{parentName:"p"},"reproducibly build"),", ",Object(r.b)("strong",{parentName:"p"},"test"),", and ",Object(r.b)("strong",{parentName:"p"},"run")," OS images for\ncontainers and hosts."),Object(r.b)("p",null,"Images are specified as ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://buck.build/"}),"Buck")," build targets, which\n",Object(r.b)("strong",{parentName:"p"},"declaratively compose")," Antlir\u2019s\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/bazelbuild/starlark"}),"Starlark")," macros.  Our image\nlanguage supports inheritance (aka layering), as well as functional\ncomposition.  The API is safe by design:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"detects filesystem conflicts, and fails at build-time"),Object(r.b)("li",{parentName:"ul"},"avoids constructs with non-deterministic or implicit behavior"),Object(r.b)("li",{parentName:"ul"},"prevents sequencing bugs by automatically dependency-sorting actions")),Object(r.b)("p",null,"Builds are ",Object(r.b)("strong",{parentName:"p"},"fast")," thanks to a combination of Buck parallelism, caching,\nand Antlir\u2019s usage of the ",Object(r.b)("inlineCode",{parentName:"p"},"btrfs")," copy-on-write filesystem (NB: we use a\nloopback, so no need to reformat your host FS)."),Object(r.b)("p",null,"Antlir supports a variety of ",Object(r.b)("strong",{parentName:"p"},"image packaging")," styles, including tarballs,\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Cpio"}),"cpio"),",\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/SquashFS"}),"SquashFS"),",\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://btrfs.wiki.kernel.org/index.php/Main_Page"}),"btrfs")," loopbacks and\nsendstreams.  We are now working on a package-centric deployment format,\nwhich implicitly shares content between related images, or versions of\nimages \u2014 reducing container update time, and disk usage, and enabling\npackage-level hotfixes."),Object(r.b)("h2",{id:"easy-maintainable-efficient-image-deployment"},"Easy, maintainable, efficient image deployment"),Object(r.b)("p",null,"Before Antlir, a typical image deployment workflow might look like this:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Write a script to compose and package an image."),Object(r.b)("li",{parentName:"ul"},"For each new application, copy or refactor the script to accommodate it,\nand build a new redistributable."),Object(r.b)("li",{parentName:"ul"},"Struggle with the maintenance weight of undeclared dependencies, code\nduplication, and expensive updates.")),Object(r.b)("p",null,"Antlir\u2019s feature-set helps you move away from monolithic \u201ckitchen sink\u201d\nimages, and instead focus on developing, testing, and composing \u201cimage\nfeatures\u201d.  Features can blend packaging and configuration management,\nspecifying either the binaries to deploy, or their configuration, or both.\nAntlir does not prevent the use of runtime configuration management, but it\nmakes it easy to do what ",Object(r.b)("em",{parentName:"p"},"can")," be done at build-time, so that your\napplication can be tested and deployed safely.  With Antlir, you would:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Split the commonly used parts of your OS filesystem into layers, for\nbetter build speed and uniformity of infrastructure.  Layers are a good\npoint of ownership, since they can be tested and released as pre-built\nartifacts."),Object(r.b)("li",{parentName:"ul"},"Compose the layers from features, maximizing code clarity and reuse.\nEach feature can be tested with minimal images \u2014 this is the\nimage-building analog of unit tests."),Object(r.b)("li",{parentName:"ul"},"Specialize the few shared layers into many per-application layers.  Each\napplication gains clear dependencies, and control of its release cycle.\nSince the parent layers and features have their own tests, the\napplication owner can focus on testing their integration, without\nworrying about the OS.  Lastly, with the upcoming package-centric\ndeployment, each application will only pay for the new bytes that it\nadds to the image.")),Object(r.b)("h2",{id:"reproducibility"},"Reproducibility"),Object(r.b)("p",null,"For a fixed source control revision, ",Object(r.b)("inlineCode",{parentName:"p"},"buck build //image:target")," should\nproduce a ",Object(r.b)("strong",{parentName:"p"},"functionally identical")," image, no matter who runs the build, or\nwhen.  For now, images are ",Object(r.b)("em",{parentName:"p"},"not")," bitwise-reproducible:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"We make no effort to eliminate C/C++ compiler entropy,"),Object(r.b)("li",{parentName:"ul"},"We do not prevent the embedding of \u201cbuild info\u201d",Object(r.b)("sup",Object(a.a)({parentName:"li"},{id:"fnref-build_info"}),Object(r.b)("a",Object(a.a)({parentName:"sup"},{href:"#fn-build_info",className:"footnote-ref"}),"build_info"))," (such as\ntime, host, source control, etc) into the build output.")),Object(r.b)("p",null,"However, we do go to significant lengths to eliminate functional variation.\nSpecifically:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Image assembly happens in containers with no network access.  Use\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://buck.build/rule/http_file.html"}),Object(r.b)("inlineCode",{parentName:"a"},"http_file"))," for out-of-repo\nresources."),Object(r.b)("li",{parentName:"ul"},"RPM installs do not talk to \u201clive\u201d repos, which can change at any time.\nInstead, we commit a reference to a fixed \u201crepo snapshot\u201d into source\ncontrol, and use that to install repo-deterministic packages.  As part\nof the default \u201cbuild appliance\u201d (",Object(r.b)("strong",{parentName:"li"},"TODO")," link to definition), we\nmaintain snapshots for commonly-used distros.  If you need your own repo\nsnapshots, Antlir comes with the tools to maintain them."),Object(r.b)("li",{parentName:"ul"},"Buck is designed for repo-deterministic builds \u2014 its distributed cache\nsemantics will break if a build is not repo-hermetic.  Specifically, if\nhost ",Object(r.b)("em",{parentName:"li"},"A")," builds and caches an artifact, and host ",Object(r.b)("em",{parentName:"li"},"B")," later uses it, the\nartifact must be functionally substitutable, or host ",Object(r.b)("em",{parentName:"li"},"B"),"\u2019s output will\nbe incorrect.  So, the output of each Buck rule must only depend on its\ninputs, and the inputs themselves should be functions of the current\nrepo rev, Buck config options, and nothing else.")),Object(r.b)("h3",{id:"benefits-of-reproducibly-built-images"},"Benefits of reproducibly built images"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Easy-to-debug production builds.")," If your image is misbehaving, just\ncheck out the source control revision that built it, and make a patch to\ninstrument the build.  Now you have an instrumented image that is very\nlikely to reproduce your problem."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Safer hotfixes.")," With images, services get predictable filesystems:\n",Object(r.b)("em",{parentName:"li"},"what you build is what you test, is what you deploy"),".  Let\u2019s say you\nfind a bug in production, and need to apply a small patch to fix it.  If\nyour build is not reproducible, rebuilding with the hotfix can bring in\nunrelated changes, turning your hotfix into a larger outage."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Bisects from source control.")," For any service breakage, whether\ncaused by your binary, or by its OS dependencies, you can use the\n\u201cbisect\u201d feature of your version-control system to easily find the\noffending change."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Auditing of build artifacts.")," Given trusted source code, and a built\nartifact, reproducibility is essential for validating that the artifact\nwas in fact built from the source.  This lets you monitor for\ncompromised build hosts.")),Object(r.b)("h2",{id:"pre-built-artifacts"},"Pre-built artifacts"),Object(r.b)("p",null,"A common development pattern is that you have one team maintaining a layer,\nwhich is used by many other teams."),Object(r.b)("p",null,"In such a case, it is possible that a single change to this parent layer\nwill break many child layers.  It can therefore be preferable for the common\nimage to be built and tested from source control, and then released\ngradually to customers as a pre-build artifact."),Object(r.b)("p",null,"Releasing common image layers as pre-built artifacts can also speed up build\ntime for the teams that depend on it."),Object(r.b)("p",null,"For a concrete example of a pre-built artifact, consider the \u201cbuild\nappliance\u201d image (",Object(r.b)("strong",{parentName:"p"},"TODO")," link).  This is a pre-built image, which contains\nall that is necessary to build new images, including tooling and RPM repo\nsnapshots."),Object(r.b)("p",null,"Antlir comes with first-class support for pre-built images, including:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"fetching them from external blob-stores & validating checksums (",Object(r.b)("strong",{parentName:"li"},"TODO"),"\nlink to impl)"),Object(r.b)("li",{parentName:"ul"},"using them in builds \u2014 just import your downloaded blob to present an\n",Object(r.b)("inlineCode",{parentName:"li"},"image.layer"),"-like build-time interface, see e.g.\n",Object(r.b)("inlineCode",{parentName:"li"},"image.layer_from_package")),Object(r.b)("li",{parentName:"ul"},"packaging them via ",Object(r.b)("inlineCode",{parentName:"li"},"image.package")),Object(r.b)("li",{parentName:"ul"},"publishing them to a blob store via ",Object(r.b)("inlineCode",{parentName:"li"},"buck run")," (",Object(r.b)("strong",{parentName:"li"},"TODO")," link to impl)")),Object(r.b)("p",null,"In effect, Antlir comes with all the tools to maintain a basic image\nregistry.  This of course does not prevent integration with third-party\nimage registries, but simply exists to allow for reproducible,\nclosed-ecosystem builds that involve pre-built artifacts. Read more in the\n",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"concepts/pre-built-artifacts/fetched-artifacts"}),"pre-built artifacts section"),"."),Object(r.b)("h2",{id:"bonus-features-of-antlir"},"Bonus features of Antlir"),Object(r.b)("p",null,"While these applications are slightly outside of the \u201cbuild OS images\u201d\nmission, they are core to the implementation, and will likely be supported\nindefinitely."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Build sandbox:")," The Antlir runtime provides a build-time sandbox for\nmaking other build systems reproducible.  Conceptually: you build an\nimage with all your build dependencies, and then use\n",Object(r.b)("inlineCode",{parentName:"li"},"image.genrule_layer")," to run a build step inside it.  For a working\nexample, check out ",Object(r.b)("inlineCode",{parentName:"li"},"image_rpmbuild_layer"),", which is a light analog of\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/rpm-software-management/mock/wiki"}),Object(r.b)("inlineCode",{parentName:"a"},"mock")),", with the\nadded benefit that ",Object(r.b)("em",{parentName:"li"},"both")," the build image, and the build dependencies\nare completely reproducible."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Non-OS filesystems:")," One can, of course, build non-OS filesystem\nimages \u2014 and it is even possible to test them by ",Object(r.b)("inlineCode",{parentName:"li"},"image.layer_mount"),"ing\nthem into a test layer that does have the OS tools that you need."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Easy btrfs comparison:")," Antlir comes with an elegant toolbox for\nvalidating the entire",Object(r.b)("sup",Object(a.a)({parentName:"li"},{id:"fnref-btrfs_diff"}),Object(r.b)("a",Object(a.a)({parentName:"sup"},{href:"#fn-btrfs_diff",className:"footnote-ref"}),"btrfs_diff"))," contents of btrfs filesystems.  We\nuse this extensively for integration testing of image builds, for\nexample, this asserts the ",Object(r.b)("strong",{parentName:"li"},"complete")," state of an image:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),'self.assertEqual(\n    ["(Dir)", {"a_dir": ["(Dir)", {"empty_file": ["(File m444)"]}]}],\n    render_subvol(subvol),\n)\n')))),Object(r.b)("h2",{id:"what-antlir-cannot-yet-do"},"What Antlir cannot (yet?) do"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Bitwise reproducibility of artifacts \u2014 check back in late 2021 to see if\nthis changes."),Object(r.b)("li",{parentName:"ul"},"Non-RPM package managers, although eventual support for ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://wiki.archlinux.org/index.php/pacman"}),"Arch\npacman")," is likely.  If you\nare well-positioned to contribute and maintain  ",Object(r.b)("inlineCode",{parentName:"li"},".deb")," support, we are\neager to support you."),Object(r.b)("li",{parentName:"ul"},"A \u201cproduction-identical\u201d container runtime.  You get a container when\nyou ",Object(r.b)("inlineCode",{parentName:"li"},"buck {test,run}")," your image, but we lack a tool to run in exactly\nthe same container runtime on your favorite container manager.  Such\ndeployment could be supported for limited use-cases, but \u201cdeep\u201d\nintegration is expensive \u2014 create a Github issue you want to maintain\nsuch an integration for your favorite runtime.  For now, you can build &\npackage with Antlir, and deploy it with your production runtime, hoping\nthat the setup differences are negligible."),Object(r.b)("li",{parentName:"ul"},"Building images with tools besides Buck \u2014 though you can certainly\ningest binaries from other build systems by wrapping them with Buck\n",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://buck.build/rule/genrule.html"}),Object(r.b)("inlineCode",{parentName:"a"},"genrule")),"s, or ",Object(r.b)("inlineCode",{parentName:"li"},"genrule_layer"),"s,\nsee e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"rpmbuild_layer")," (",Object(r.b)("strong",{parentName:"li"},"TODO"),": link).  We can also imagine a\npartnership to integrate similar build systems, especially Bazel, whose\nmacro layer leverages Starlark with a more powerful composition model.")),Object(r.b)("h2",{id:"footnotes"},"Footnotes"),Object(r.b)("div",{className:"footnotes"},Object(r.b)("hr",{parentName:"div"}),Object(r.b)("ol",{parentName:"div"},Object(r.b)("li",Object(a.a)({parentName:"ol"},{id:"fn-build_info"}),"The only safe way to embed buildinfo into binariesis via\n",Object(r.b)("inlineCode",{parentName:"li"},'buck --config buildinfo.timestamp="$(date +%s)"')," \u2014 never shell out to\n",Object(r.b)("inlineCode",{parentName:"li"},"date")," as part of a build rule.",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#fnref-build_info",className:"footnote-backref"}),"\u21a9")),Object(r.b)("li",Object(a.a)({parentName:"ol"},{id:"fn-btrfs_diff"}),Object(r.b)("inlineCode",{parentName:"li"},"antlir/btrfs_diff")," knows how to compare all the VFS features\nsupported by btrfs sendstream v1: special files, xattrs, cloned extents,\netc.  Caveat \u2014 v1 does not support ",Object(r.b)("inlineCode",{parentName:"li"},"chattr"),", but this should be added in v2\nor v3.",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"#fnref-btrfs_diff",className:"footnote-backref"}),"\u21a9")))))}b.isMDXComponent=!0}}]);