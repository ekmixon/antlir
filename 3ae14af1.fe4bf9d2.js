(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{113:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,h=d["".concat(o,".").concat(u)]||d[u]||s[u]||l;return n?i.a.createElement(h,r(r({ref:t},c),{},{components:n})):i.a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var c=2;c<l;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),l=(n(0),n(113)),o={id:"shape",title:"Shape",generated:"@generated"},r={unversionedId:"api/shape",id:"api/shape",isDocsHomePage:!1,title:"Shape",description:"shape.bzl provides a convenient strongly-typed bridge from Buck bzl parse",source:"@site/docs/api/gen-shape.md",slug:"/api/shape",permalink:"/antlir/docs/api/shape",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/api/gen-shape.md",version:"current",sidebar:"docs",previous:{title:"vm.*_unittest",permalink:"/antlir/docs/runtime/vm-runtime/vm-unittest"},next:{title:"Flavor_helpers",permalink:"/antlir/docs/api/flavor_helpers"}},p=[{value:"Shape objects",id:"shape-objects",children:[]},{value:"Shape Types",id:"shape-types",children:[]},{value:"Field Types",id:"field-types",children:[]},{value:"Optional and Defaulted Fields",id:"optional-and-defaulted-fields",children:[]},{value:"Loaders",id:"loaders",children:[]},{value:"Serialization formats",id:"serialization-formats",children:[]},{value:"Naming Conventions",id:"naming-conventions",children:[]},{value:"Example usage",id:"example-usage",children:[]},{value:"<code>shape</code>",id:"shape",children:[]},{value:"<code>new</code>",id:"new",children:[]},{value:"<code>field</code>",id:"field",children:[]},{value:"<code>dict</code>",id:"dict",children:[]},{value:"<code>list</code>",id:"list",children:[]},{value:"<code>tuple</code>",id:"tuple",children:[]},{value:"<code>union</code>",id:"union",children:[]},{value:"<code>union_t</code>",id:"union_t",children:[]},{value:"<code>enum</code>",id:"enum",children:[]},{value:"<code>path</code>",id:"path",children:[]},{value:"<code>target</code>",id:"target",children:[]},{value:"<code>loader</code>",id:"loader",children:[]},{value:"<code>json_file</code>",id:"json_file",children:[]},{value:"<code>python_data</code>",id:"python_data",children:[]},{value:"<code>do_not_cache_me_json</code>",id:"do_not_cache_me_json",children:[]},{value:"<code>render_template</code>",id:"render_template",children:[]},{value:"<code>as_dict_shallow</code>",id:"as_dict_shallow",children:[]},{value:"<code>as_dict_for_target_tagger</code>",id:"as_dict_for_target_tagger",children:[]},{value:"<code>as_serializable_dict</code>",id:"as_serializable_dict",children:[]},{value:"<code>is_instance</code>",id:"is_instance",children:[]},{value:"<code>is_any_instance</code>",id:"is_any_instance",children:[]},{value:"<code>pretty</code>",id:"pretty",children:[]}],c={toc:p};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"shape.bzl provides a convenient strongly-typed bridge from Buck bzl parse\ntime to Python runtime."),Object(l.b)("h2",{id:"shape-objects"},"Shape objects"),Object(l.b)("p",null,"Shape objects are immutable instances of a shape type, that have been\nvalidated to match the shape type spec as described below."),Object(l.b)("h2",{id:"shape-types"},"Shape Types"),Object(l.b)("p",null,"Shape types are a collection of strongly typed fields that can be validated\nat Buck parse time (by ",Object(l.b)("inlineCode",{parentName:"p"},"shape.new"),") and at Python runtime (by ",Object(l.b)("inlineCode",{parentName:"p"},"shape.loader"),"\nimplementations)."),Object(l.b)("h2",{id:"field-types"},"Field Types"),Object(l.b)("p",null,"A shape field is a named member of a shape type. There are a variety of field\ntypes available:\nprimitive types (bool, int, float, str)\nother shapes\nhomogenous lists of a single ",Object(l.b)("inlineCode",{parentName:"p"},"field")," element type\ndicts with homogenous key ",Object(l.b)("inlineCode",{parentName:"p"},"field")," types and homogenous ",Object(l.b)("inlineCode",{parentName:"p"},"field")," value type\nheterogenous tuples with ",Object(l.b)("inlineCode",{parentName:"p"},"field")," element types\nenums with string values\nunions via shape.union(type1, type2, ...)"),Object(l.b)("p",null,"If using a union, use the most specific type first as Pydantic will attempt to\ncoerce to the types in the order listed\n(see ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://pydantic-docs.helpmanual.io/usage/types/#unions"}),"https://pydantic-docs.helpmanual.io/usage/types/#unions"),") for more info."),Object(l.b)("h2",{id:"optional-and-defaulted-fields"},"Optional and Defaulted Fields"),Object(l.b)("p",null,"By default, fields are required to be set at instantiation time\n(",Object(l.b)("inlineCode",{parentName:"p"},"shape.new"),")."),Object(l.b)("p",null,"Fields declared with ",Object(l.b)("inlineCode",{parentName:"p"},"shape.field(..., default='val')")," do not have to be\ninstantiated explicitly."),Object(l.b)("p",null,"Additionally, fields can be marked optional by using the ",Object(l.b)("inlineCode",{parentName:"p"},"optional")," kwarg in\n",Object(l.b)("inlineCode",{parentName:"p"},"shape.field")," (or any of the collection field types: ",Object(l.b)("inlineCode",{parentName:"p"},"shape.list"),",\n",Object(l.b)("inlineCode",{parentName:"p"},"shape.tuple"),", or ",Object(l.b)("inlineCode",{parentName:"p"},"shape.dict"),")."),Object(l.b)("p",null,"For example, ",Object(l.b)("inlineCode",{parentName:"p"},"shape.field(int, optional=True)")," denotes an integer field that\nmay or may not be set in a shape object."),Object(l.b)("p",null,"Obviously, optional fields are still subject to the same type validation as\nnon-optional fields, but only if they have a non-None value."),Object(l.b)("h2",{id:"loaders"},"Loaders"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"shape.loader")," codegens a type-hinted Python library that is capable of\nparsing and validating a shape object at runtime.\nThe return value of shape.loader is the fully-qualified name of the\n",Object(l.b)("inlineCode",{parentName:"p"},"python_library")," rule that contains the implementation of this loader."),Object(l.b)("h2",{id:"serialization-formats"},"Serialization formats"),Object(l.b)("p",null,"shape.bzl provides two mechanisms to pass shape objects to Python runtime code."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"shape.json_file")," dumps a shape object to an output file. This can be read\nfrom a file or resource, using ",Object(l.b)("inlineCode",{parentName:"p"},"read_resource")," or ",Object(l.b)("inlineCode",{parentName:"p"},"read_file")," of the\ngenerated loader class."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"shape.python_data")," dumps a shape object to a raw python source file. This\nis useful for some cases where a python_binary is expected to be fully\nself-contained, but still require some build-time information. It is also\nuseful in cases when shapes are being dynamically generated based on inputs\nto a macro. See the docblock of the function for an example."),Object(l.b)("h2",{id:"naming-conventions"},"Naming Conventions"),Object(l.b)("p",null,"Shape types should be named with a suffix of '_t' to denote that it is a\nshape type.\nShape instances should conform to whatever convention is used where they are\ndeclared (usually snake_case variables)."),Object(l.b)("h2",{id:"example-usage"},"Example usage"),Object(l.b)("p",null,"Inspired by ",Object(l.b)("inlineCode",{parentName:"p"},"image_actions/mount.bzl"),":"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'mount_t = shape.shape(\n    mount_config=shape.shape(\n        build_source=shape.shape(\n            source=str,\n            type=str,\n        ),\n        default_mountpoint=str,\n        is_directory=bool,\n    ),\n    mountpoint = shape.field(str, optional=True),\n    target = shape.field(str, optional=True),\n)\n\nmount = shape.new(\n    mount_t,\n    mount_config=shape.new(\n        mount.mount_config,\n        build_source=shape.new(\n            mount.mount_config.build_source,\n            source="/etc/fbwhoami",\n            type="host",\n        ),\n        default_mountpoint="/etc/fbwhoami",\n        is_directory=False,\n    ),\n)\n')),Object(l.b)("p",null,"See tests/shape_test.bzl for full example usage and selftests."),Object(l.b)("h1",{id:"api"},"API"),Object(l.b)("h2",{id:"shape"},Object(l.b)("inlineCode",{parentName:"h2"},"shape")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"shape(**fields)")),Object(l.b)("p",null,"Define a new shape type with the fields as given by the kwargs."),Object(l.b)("p",null,"Example usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"shape.shape(hello=str)\n")),Object(l.b)("h2",{id:"new"},Object(l.b)("inlineCode",{parentName:"h2"},"new")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"new(shape, **fields)")),Object(l.b)("p",null,"Type check and instantiate a struct of the given shape type using the\nvalues from the **fields kwargs."),Object(l.b)("p",null,"Example usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'example_t = shape.shape(hello=str)\nexample = shape.new(example_t, hello="world")\n')),Object(l.b)("h2",{id:"field"},Object(l.b)("inlineCode",{parentName:"h2"},"field")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"field(type, optional, default)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"dict"},Object(l.b)("inlineCode",{parentName:"h2"},"dict")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"dict(key_type, val_type, **field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"list"},Object(l.b)("inlineCode",{parentName:"h2"},"list")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"list(item_type, **field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"tuple"},Object(l.b)("inlineCode",{parentName:"h2"},"tuple")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"tuple(*item_types, **field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"union"},Object(l.b)("inlineCode",{parentName:"h2"},"union")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"union(*union_types, **field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"union_t"},Object(l.b)("inlineCode",{parentName:"h2"},"union_t")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"union_t(*union_types)")),Object(l.b)("p",null,"Define a new union type that can be used when defining a field. Most\nuseful when a union type is meant to be typedef'd and reused. To define\na shape field directly, see shape.union."),Object(l.b)("p",null,"Example usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'mode_t = shape.union_t(int, str)  # could be 0o644 or "a+rw"\n\ntype_a = shape.shape(mode=mode_t)\ntype_b = shape.shape(mode=shape.field(mode_t, optional=True))\n')),Object(l.b)("h2",{id:"enum"},Object(l.b)("inlineCode",{parentName:"h2"},"enum")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"enum(*values, **field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"path"},Object(l.b)("inlineCode",{parentName:"h2"},"path")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"path(**field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"target"},Object(l.b)("inlineCode",{parentName:"h2"},"target")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"target(**field_kwargs)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"loader"},Object(l.b)("inlineCode",{parentName:"h2"},"loader")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"loader(name, shape, classname, **kwargs)")),Object(l.b)("p",null,"codegen a fully type-hinted python source file to load the given shape"),Object(l.b)("h2",{id:"json_file"},Object(l.b)("inlineCode",{parentName:"h2"},"json_file")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"json_file(name, instance, visibility)")),Object(l.b)("p",null,"Serialize the given shape instance to a JSON file that can be used in the\n",Object(l.b)("inlineCode",{parentName:"p"},"resources")," section of a ",Object(l.b)("inlineCode",{parentName:"p"},"python_binary")," or a ",Object(l.b)("inlineCode",{parentName:"p"},"$(location)")," macro in a\n",Object(l.b)("inlineCode",{parentName:"p"},"buck_genrule"),"."),Object(l.b)("p",null,"Warning: this will fail to serialize any shape type that contains a\nreference to a target location, as that cannot be safely cached by buck."),Object(l.b)("h2",{id:"python_data"},Object(l.b)("inlineCode",{parentName:"h2"},"python_data")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"python_data(name, instance, module, classname, **python_library_kwargs)")),Object(l.b)("p",null,"Codegen a static shape data structure that can be directly 'import'ed by\nPython. The object is available under the name \"data\". A common use case\nis to call shape.python_data inline in a target's ",Object(l.b)("inlineCode",{parentName:"p"},"deps"),", with ",Object(l.b)("inlineCode",{parentName:"p"},"module"),"\n(defaults to ",Object(l.b)("inlineCode",{parentName:"p"},"name"),") then representing the name of the module that can be\nimported in the underlying file."),Object(l.b)("p",null,"Example usage:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),'python_binary(\n    name = provided_name,\n    deps = [\n        shape.python_data(\n            name = "bin_bzl_args",\n            instance = shape.new(\n                some_shape_t,\n                var = input_var,\n            ),\n        ),\n    ],\n    ...\n)\n')),Object(l.b)("p",null,"can then be imported as:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{}),"from .bin_bzl_args import data\n")),Object(l.b)("h2",{id:"do_not_cache_me_json"},Object(l.b)("inlineCode",{parentName:"h2"},"do_not_cache_me_json")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"do_not_cache_me_json(instance)")),Object(l.b)("p",null,"Serialize the given shape instance to a JSON string, which is the only\nway to safely refer to other Buck targets' locations in the case where\nthe binary being invoked with a certain shape instance is cached."),Object(l.b)("p",null,"Warning: Do not ever put this into a target that can be cached, it should\nonly be used in cmdline args or environment variables."),Object(l.b)("h2",{id:"render_template"},Object(l.b)("inlineCode",{parentName:"h2"},"render_template")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"render_template(name, instance, template)")),Object(l.b)("p",null,"Render the given Jinja2 template with the shape instance data to a file."),Object(l.b)("p",null,"Warning: this will fail to serialize any shape type that contains a\nreference to a target location, as that cannot be safely cached by buck."),Object(l.b)("h2",{id:"as_dict_shallow"},Object(l.b)("inlineCode",{parentName:"h2"},"as_dict_shallow")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"as_dict_shallow(instance)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"as_dict_for_target_tagger"},Object(l.b)("inlineCode",{parentName:"h2"},"as_dict_for_target_tagger")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"as_dict_for_target_tagger(instance)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"as_serializable_dict"},Object(l.b)("inlineCode",{parentName:"h2"},"as_serializable_dict")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"as_serializable_dict(instance)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"is_instance"},Object(l.b)("inlineCode",{parentName:"h2"},"is_instance")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"is_instance(instance, shape)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"is_any_instance"},Object(l.b)("inlineCode",{parentName:"h2"},"is_any_instance")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"is_any_instance(instance)")),Object(l.b)("p",null,"No docstring available."),Object(l.b)("h2",{id:"pretty"},Object(l.b)("inlineCode",{parentName:"h2"},"pretty")),Object(l.b)("p",null,"Prototype: ",Object(l.b)("inlineCode",{parentName:"p"},"pretty(x)")),Object(l.b)("p",null,"No docstring available."))}b.isMDXComponent=!0}}]);