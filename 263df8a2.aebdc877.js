(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},f=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(n),f=r,d=u["".concat(i,".").concat(f)]||u[f]||b[f]||a;return n?o.a.createElement(d,l(l({ref:t},s),{},{components:n})):o.a.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),a=(n(0),n(117)),i={id:"overview",title:"Overview"},l={unversionedId:"concepts/flavors/overview",id:"concepts/flavors/overview",isDocsHomePage:!1,title:"Overview",description:"Introduction to Flavors",source:"@site/docs/concepts/flavors/overview.md",slug:"/concepts/flavors/overview",permalink:"/antlir/docs/concepts/flavors/overview",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/concepts/flavors/overview.md",version:"current",sidebar:"docs",previous:{title:"Fetched Artifacts",permalink:"/antlir/docs/concepts/pre-built-artifacts/fetched-artifacts"},next:{title:"Inheritance in Parent Layers",permalink:"/antlir/docs/concepts/flavors/inheritance-in-parent-layers"}},c=[{value:"Introduction to Flavors",id:"introduction-to-flavors",children:[]},{value:"Using Flavors",id:"using-flavors",children:[]}],s={toc:c};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"introduction-to-flavors"},"Introduction to Flavors"),Object(a.b)("p",null,"A flavor is a string identifier that controls build configurations.\nOptions contained in a flavor can include ",Object(a.b)("inlineCode",{parentName:"p"},"build_appliance")," as well\nas ",Object(a.b)("inlineCode",{parentName:"p"},"rpm_installer"),"."),Object(a.b)("p",null,"This allows us to specify compability between\ndifferent images. For example, we can make sure that ",Object(a.b)("inlineCode",{parentName:"p"},"centos7")," images\ndo not depend on ",Object(a.b)("inlineCode",{parentName:"p"},"centos8")," images, which is a breaking version."),Object(a.b)("p",null,"It also allows to reuse common build opts throughout the codebase\nwith less duplication."),Object(a.b)("p",null,"Flavors are strings instead of functions because a flavor must have\na stable identity as the source tree evolves. We must be able to\ncompare flavors between old revs and new. The container runtime must\nalso be able to rely on stable flavor IDs. Flavors names must\nfollow two critical rules:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"- Never change a flavor name\n- Never reuse a flavor name\n")),Object(a.b)("h2",{id:"using-flavors"},"Using Flavors"),Object(a.b)("p",null,"To create a flavor add a mapping to ",Object(a.b)("inlineCode",{parentName:"p"},"antlir/bzl/oss_shim_impl.bzl")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'shim = struct(\n    do_not_use_repo_cfg = {\n        "flavor_to_config": {\n            "your_flavor_here": {\n                "build_appliance": "//path/to/your/build/appliance",\n                "rpm_installer": "your_rpm_installer",\n            },\n        },\n    },\n\n)\n')),Object(a.b)("p",null,"Then, you can pass the flavor to images. You can also override the\ndefault value in the flavor with custom ones."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'image.layer(\n    flavor = "your_flavor_here",\n    flavor_config_overrides = image.opts(\n        build_appliance = "//your/override/build/appliance",\n        ...\n    )\n)\n')),Object(a.b)("p",null,"The flavor of an image is written as a string to the file\n",Object(a.b)("inlineCode",{parentName:"p"},"/.meta/flavor")," in the image. This allows you to check the compatibility\nof layers. We use this to load sendstreams built on a different revision\nwith a possibly different build appliance."))}p.isMDXComponent=!0}}]);