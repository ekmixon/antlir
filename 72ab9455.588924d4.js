(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{114:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(n),d=a,m=u["".concat(o,".").concat(d)]||u[d]||p[d]||i;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(114)),o={id:"bzl-and-targets",title:".bzl and TARGETS"},l={unversionedId:"contributing/coding-conventions/bzl-and-targets",id:"contributing/coding-conventions/bzl-and-targets",isDocsHomePage:!1,title:".bzl and TARGETS",description:"Stay lint clean",source:"@site/docs/contributing/coding-conventions/bzl-and-targets.md",slug:"/contributing/coding-conventions/bzl-and-targets",permalink:"/antlir/docs/contributing/coding-conventions/bzl-and-targets",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/contributing/coding-conventions/bzl-and-targets.md",version:"current",sidebar:"docs",previous:{title:"Flavor_helpers",permalink:"/antlir/docs/api/flavor_helpers"},next:{title:"Pyre",permalink:"/antlir/docs/contributing/coding-conventions/pyre"}},s=[{value:"Stay lint clean",id:"stay-lint-clean",children:[]},{value:"Please maintain <code>fake_macro_library</code> dependencies",id:"please-maintain-fake_macro_library-dependencies",children:[]},{value:"Target naming: dash-separated binaries &amp; layers, underscore-separated libraries &amp; features",id:"target-naming-dash-separated-binaries--layers-underscore-separated-libraries--features",children:[]},{value:"Write pure functions, macros, or macro wrappers",id:"write-pure-functions-macros-or-macro-wrappers",children:[]},{value:"No mutable state outside of functions",id:"no-mutable-state-outside-of-functions",children:[]},{value:"Be careful with traversal ordering",id:"be-careful-with-traversal-ordering",children:[]},{value:"Stay Starlark-compatible",id:"stay-starlark-compatible",children:[]},{value:"Do not expose magic target names to the user",id:"do-not-expose-magic-target-names-to-the-user",children:[]},{value:"Get expert review when writing genrules",id:"get-expert-review-when-writing-genrules",children:[]},{value:"In genrules, use bash arrays for <code>$()</code> command substitution",id:"in-genrules-use-bash-arrays-for--command-substitution",children:[]},{value:"Use <code>maybe_export_file</code> when appropriate",id:"use-maybe_export_file-when-appropriate",children:[]},{value:"Load from <code>oss_shim.bzl</code>, avoid built-in (or fbcode) build rules",id:"load-from-oss_shimbzl-avoid-built-in-or-fbcode-build-rules",children:[]},{value:"Mark user-instantiated rules with <code>antlir_rule = &quot;user-{facing,internal}&quot;</code>",id:"mark-user-instantiated-rules-with-antlir_rule--user-facinginternal",children:[]},{value:"Naming conventions when using <code>shape.bzl</code>",id:"naming-conventions-when-using-shapebzl",children:[]}],c={toc:s};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"stay-lint-clean"},"Stay lint clean"),Object(i.b)("p",null,"Enough said. Critically, this ensures that we don't stray outside of the\nrestricted feature-set of the Starlark language (the Buck runtime is\ncurrently much more permissive)."),Object(i.b)("h2",{id:"please-maintain-fake_macro_library-dependencies"},"Please maintain ",Object(i.b)("inlineCode",{parentName:"h2"},"fake_macro_library")," dependencies"),Object(i.b)("p",null,"Take a look at the doc in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebookincubator/antlir/blob/master/antlir/bzl/BUCK#L4"}),"antlir/bzl/TARGETS"),".\nThis is kind of a chore, but it helps kick off the right CI jobs when we edit\n",Object(i.b)("inlineCode",{parentName:"p"},".bzl")," files, so it's worth doing."),Object(i.b)("p",null,"Ideally, we would just write a linter to do this on our behalf. However,\nwe haven't yet found time."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note:")," The vmtest macros have not yet been updated to follow this pattern, help\nis welcome!"),Object(i.b)("h2",{id:"target-naming-dash-separated-binaries--layers-underscore-separated-libraries--features"},"Target naming: dash-separated binaries & layers, underscore-separated libraries & features"),Object(i.b)("p",null,"This convention follows ",Object(i.b)("inlineCode",{parentName:"p"},"fbcode/folly/"),". One concrete benefit is that it's\neasier to spot when a ",Object(i.b)("inlineCode",{parentName:"p"},"python_binary")," is being used as a library without the\n",Object(i.b)("inlineCode",{parentName:"p"},"-library")," suffix to reference the implicit library target."),Object(i.b)("h2",{id:"write-pure-functions-macros-or-macro-wrappers"},"Write pure functions, macros, or macro wrappers"),Object(i.b)("p",null,"The failure mode here is writing something that is neither clearly a\nfunction nor a macro, but a mix."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A function defines no targets, returns a value, and has no side-effects.\nFunctions that take mutable arguments are acceptable only in very limited\ncircumstances (e.g. ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/facebookincubator/antlir/blob/master/antlir/common.py#L69"}),"set_new_key"),")."),Object(i.b)("li",{parentName:"ul"},"A macro takes ",Object(i.b)("inlineCode",{parentName:"li"},"name")," as its first arg, and defines a target of that name\n(along with possibly auxiliary functions). When convenient, an internal\nmacro ",Object(i.b)("strong",{parentName:"li"},"may")," return a path to the target it created, but we have not made\nthis the norm for externally visible macros."),Object(i.b)("li",{parentName:"ul"},"A macro wrapper transforms a target into a wrapped target, and returns the\npath to the wrapper. You should write these very rarely.")),Object(i.b)("h2",{id:"no-mutable-state-outside-of-functions"},"No mutable state outside of functions"),Object(i.b)("p",null,"If you define a module-level ",Object(i.b)("inlineCode",{parentName:"p"},"a = []"),", and mutate it from your macros, this\nis a sure-fire way to get non-deterministic builds."),Object(i.b)("p",null,"The precise reason is that Buck doesn't guarantee order of evaluation of\nyour macros across files, so a macro that updates order-sensitive mutable\nglobals can create non-determinism that breaks target determinators for the\nentire repo, potentially costing many human-days to triage & fix."),Object(i.b)("h2",{id:"be-careful-with-traversal-ordering"},"Be careful with traversal ordering"),Object(i.b)("p",null,"If you're not sure whether some container or traversal is guaranteed to be\ndeterministically ordered in Buck, sort it (or check)."),Object(i.b)("h2",{id:"stay-starlark-compatible"},"Stay Starlark-compatible"),Object(i.b)("p",null,"Keep in mind that Buck currently supports at least two frontends for ",Object(i.b)("inlineCode",{parentName:"p"},".bzl"),"\nfiles: python3 and Starlark (and the default differs between FB-internal and\nopen-source).  You must write code that is compatible with both."),Object(i.b)("p",null,"To check both back-ends, run:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"buck targets -c parser.default_build_file_syntax=skylark //your/proj:\nbuck targets -c parser.default_build_file_syntax=python_dsl //your/proj:\n")),Object(i.b)("h2",{id:"do-not-expose-magic-target-names-to-the-user"},"Do not expose magic target names to the user"),Object(i.b)("p",null,"If your macro defines a purely internal target, make sure it's namespaced so\nthat, ideally: - It does not show up in ",Object(i.b)("inlineCode",{parentName:"p"},"buck")," TAB-completion (put your magic in\nthe prefix, not suffix) - The magic prefix should discourages people from typing\nit manually into their TARGETS files or ",Object(i.b)("inlineCode",{parentName:"p"},".bzl")," files -- provide an accessor\nmethod when this is necessary, see e.g.  the FB-internal ",Object(i.b)("inlineCode",{parentName:"p"},"fetched_layer")," in\n",Object(i.b)("inlineCode",{parentName:"p"},"fbpkg.bzl"),"."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If appropriate, use ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/facebookincubator/antlir/blob/master/antlir/bzl/target_helpers.bzl#L32"}),"mangle_target"),".")),Object(i.b)("p",null,"There are exceptions to this, which are magic target names that we expect users\nto type as part of a ",Object(i.b)("inlineCode",{parentName:"p"},"buck")," command-line on a regular basis. Reference ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/antlir/docs/tutorials/helper-buck-targets"}),"Helper Buck Targets")," for a list of examples."),Object(i.b)("h2",{id:"get-expert-review-when-writing-genrules"},"Get expert review when writing genrules"),Object(i.b)("p",null,"There are a lot of failure-modes here, from quoting to error-handling, to\nmis-uses of command substitution via ",Object(i.b)("inlineCode",{parentName:"p"},"\\$()"),", to mis-uses of ",Object(i.b)("inlineCode",{parentName:"p"},"$(exe)")," vs\n",Object(i.b)("inlineCode",{parentName:"p"},"$(location)"),", to errors in cacheability. For now, treat any diff with such code\nas blocked on a review from @lesha. We need a second domain expert ASAP."),Object(i.b)("p",null,"To get a taste of some potential problems, carefully study\n",Object(i.b)("inlineCode",{parentName:"p"},"_wrap_bash_build_in_common_boilerplate")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"maybe_wrap_runtime_deps_as_build_time_deps"),". This is not exhaustive."),Object(i.b)("h2",{id:"in-genrules-use-bash-arrays-for--command-substitution"},"In genrules, use bash arrays for ",Object(i.b)("inlineCode",{parentName:"h2"},"$()")," command substitution"),Object(i.b)("p",null,"You know what ",Object(i.b)("inlineCode",{parentName:"p"},'"$(ls)"')," does in ",Object(i.b)("inlineCode",{parentName:"p"},"bash"),". Now you want this in the ",Object(i.b)("inlineCode",{parentName:"p"},"bash =")," field\nof your genrule. Unfortunately, this is hard. You have to do this two-liner:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'binary_path=( $(exe //antlir:artifacts-dir) )\nartifacts_dir=\\\\$( "${binary_path[@]}" )\n')),Object(i.b)("p",null,"Understanding what follows starts with carefully reading the\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://buck.build/rule/genrule.html"}),"genrule docs"),"."),Object(i.b)("p",null,"You have to use ",Object(i.b)("inlineCode",{parentName:"p"},"exe")," instead of ",Object(i.b)("inlineCode",{parentName:"p"},"location")," because the latter will rebuild your\ngenrule if the ",Object(i.b)("strong",{parentName:"p"},"runtime dependencies")," of the executable target change, while\nthe former will only rebuild if the ",Object(i.b)("strong",{parentName:"p"},"content")," of the executable change.\nSpecifically, in @mode/dev, if the executable is a PAR, its content is just a\nsymlink, which never changes, so your genrule never rebuilds. Even with C++, you\nwould fail to rebuild on changes to any libraries that are linked into your\ncode, since in ",Object(i.b)("inlineCode",{parentName:"p"},"@mode/dev")," those are ",Object(i.b)("inlineCode",{parentName:"p"},".so"),'s that are not part of the target\'s\n"content".'),Object(i.b)("p",null,"You have to use a bash array because ",Object(i.b)("inlineCode",{parentName:"p"},"$(exe)")," expands to multiple shell words,\nBecause Buck (TM). E.g. for PARs, the expansion of ",Object(i.b)("inlineCode",{parentName:"p"},"$(exe)")," might look like\nsomething like ",Object(i.b)("inlineCode",{parentName:"p"},'python3 "/path to/the actual/binary"'),"."),Object(i.b)("h2",{id:"use-maybe_export_file-when-appropriate"},"Use ",Object(i.b)("inlineCode",{parentName:"h2"},"maybe_export_file")," when appropriate"),Object(i.b)("p",null,"If your macro takes an argument that is a target, and that target might\nsometimes be an in-repo file, use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebookincubator/antlir/blob/master/antlir/bzl/maybe_export_file.bzl"}),"maybe_export_file"),"."),Object(i.b)("h2",{id:"load-from-oss_shimbzl-avoid-built-in-or-fbcode-build-rules"},"Load from ",Object(i.b)("inlineCode",{parentName:"h2"},"oss_shim.bzl"),", avoid built-in (or fbcode) build rules"),Object(i.b)("p",null,"This shim exists to bridge the differences between the semantics of\nFB-internal build rules, and those of OSS Buck.  If you bypass it, you will\neither break Antlir for FB-internal users, or for OSS users."),Object(i.b)("p",null,"Note that any newly shimmed rules have to follow a few basic practices:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Follow the fbcode API, unless the rule has no counterpart in fbcode."),Object(i.b)("li",{parentName:"ul"},"Add both an OSS and FB implementation."),Object(i.b)("li",{parentName:"ul"},"In both implementations, wrap your rule with ",Object(i.b)("inlineCode",{parentName:"li"},"_wrap_internal"),"."),Object(i.b)("li",{parentName:"ul"},"Follow the local naming & sorting conventions.")),Object(i.b)("h2",{id:"mark-user-instantiated-rules-with-antlir_rule--user-facinginternal"},"Mark user-instantiated rules with ",Object(i.b)("inlineCode",{parentName:"h2"},'antlir_rule = "user-{facing,internal}"')),Object(i.b)("p",null,"All Buck rules used within Antlir have an ",Object(i.b)("inlineCode",{parentName:"p"},"antlir_rule")," kwarg."),Object(i.b)("p",null,"You can declare Buck rules in one of three contexts.  The context\ncorresponds to the value of the ",Object(i.b)("inlineCode",{parentName:"p"},"antlir_rule")," kwarg:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},'"antlir-private"')," (default): A private implementation detail of Antlir --\ne.g.  a ",Object(i.b)("inlineCode",{parentName:"p"},"python_library")," that is linked into the image compiler.  These\nrules need no explicit annotation.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},'"user-facing"'),": A rule that may be instantiated in a user project (aka\na Buck package outside of ",Object(i.b)("inlineCode",{parentName:"p"},"//antlir"),"), and whose output is directly\nconsumed by the user.  Specifically, the rule's ",Object(i.b)("inlineCode",{parentName:"p"},"name")," must be the ",Object(i.b)("inlineCode",{parentName:"p"},"name"),"\nprovided by the end-user, and the artifact must be user-exposed.  For\nexample, ",Object(i.b)("inlineCode",{parentName:"p"},"image.package")," is user-facing, whereas ",Object(i.b)("inlineCode",{parentName:"p"},"feature"),"s or\n",Object(i.b)("inlineCode",{parentName:"p"},"image.layer")," are considered implementation plumbing, even though users\ndeclare them directly.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},'"user-internal"'),": A rule that may be instantiated in a user project,\nwhose output is not directly usable by the client.  Besides\n",Object(i.b)("inlineCode",{parentName:"p"},"image.{feature,layer}"),", this includes private intermediate targets like\n",Object(i.b)("inlineCode",{parentName:"p"},"PREFIX-<name>"),"."))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Marking rules ",Object(i.b)("inlineCode",{parentName:"strong"},'"user-internal"')," is important"),", since FB on-diff CI only\nruns builds & test within a certain dependency distance from the modified\nsources, and ",Object(i.b)("inlineCode",{parentName:"p"},'"user-internal"')," targets get excluded from this distance\ncalculation to ensure that the right CI targets get triggered."),Object(i.b)("p",null,"To ensure that all user-instantiated (",Object(i.b)("inlineCode",{parentName:"p"},'"user-facing"')," / ",Object(i.b)("inlineCode",{parentName:"p"},'"user-internal"'),")\nrules are annotated, un-annotated rules will ",Object(i.b)("strong",{parentName:"p"},"fail to instantiate")," from\ninside a user project.  That is, if your rule doesn't set ",Object(i.b)("inlineCode",{parentName:"p"},"antlir_rule"),", it\ndefaults to ",Object(i.b)("inlineCode",{parentName:"p"},'"antlir-private"'),", which triggers ",Object(i.b)("inlineCode",{parentName:"p"},"_assert_package()"),", which\nwill fail if the Buck package path does not start with ",Object(i.b)("inlineCode",{parentName:"p"},"antlir/"),". This\nhas two desirable effects:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Antlir devs will not forget to annotate user-instantiated rules."),Object(i.b)("li",{parentName:"ul"},"External devs will not be able to (erroneously) load rules from\n",Object(i.b)("inlineCode",{parentName:"li"},"oss_shim.bzl"),".")),Object(i.b)("p",null,"The implementation details and more specific docs can be found in\n",Object(i.b)("inlineCode",{parentName:"p"},"antlir/bzl/oss_shim_impl.bzl"),"."),Object(i.b)("h2",{id:"naming-conventions-when-using-shapebzl"},"Naming conventions when using ",Object(i.b)("inlineCode",{parentName:"h2"},"shape.bzl")),Object(i.b)("p",null,"Shape types should be named with a trailing ",Object(i.b)("inlineCode",{parentName:"p"},"_t")," to indicate that it is a\nshape type. Shape instance variable names should conform to the local style\nconventions."),Object(i.b)("p",null,"For example, the type and instance for installing a tarball might look like\nthis:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"tarball_t = shape.shape(\n  from_target = shape.field(str, optional = True),\n  into_dir = str,\n)\n\ninstall_tarball = shape.new(tarball_t, from_target=..., into_dir=...)\n")))}b.isMDXComponent=!0}}]);