(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{117:function(e,n,t){"use strict";t.d(n,"a",(function(){return f})),t.d(n,"b",(function(){return h}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),p=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},f=function(e){var n=p(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(t),d=a,h=f["".concat(o,".").concat(d)]||f[d]||b[d]||i;return t?r.a.createElement(h,l(l({ref:n},c),{},{components:t})):r.a.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},95:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(117)),o={id:"inheritance-in-parent-layers",title:"Inheritance in Parent Layers"},l={unversionedId:"concepts/flavors/inheritance-in-parent-layers",id:"concepts/flavors/inheritance-in-parent-layers",isDocsHomePage:!1,title:"Inheritance in Parent Layers",description:"Inheritance from Parent Layers",source:"@site/docs/concepts/flavors/inheritance-in-parent-layers.md",slug:"/concepts/flavors/inheritance-in-parent-layers",permalink:"/antlir/docs/concepts/flavors/inheritance-in-parent-layers",editUrl:"https://github.com/facebookincubator/antlir/edit/master/website/docs/concepts/flavors/inheritance-in-parent-layers.md",version:"current",sidebar:"docs",previous:{title:"Overview",permalink:"/antlir/docs/concepts/flavors/overview"},next:{title:"Image",permalink:"/antlir/docs/api/image"}},s=[{value:"Inheritance from Parent Layers",id:"inheritance-from-parent-layers",children:[]},{value:"RPMs in inherited flavors",id:"rpms-in-inherited-flavors",children:[]}],c={toc:s};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"inheritance-from-parent-layers"},"Inheritance from Parent Layers"),Object(i.b)("p",null,"Layers with parents should have the same flavor as their parent.\nThis is because the child layer contains the same OS and RPM\ninstaller as the parent layer."),Object(i.b)("p",null,"We have a simplification in our API that lets you skip specifying\nthe flavor for child layers. The flavor is read instead from\n",Object(i.b)("inlineCode",{parentName:"p"},"/.meta/flavor")," in the parent."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'image.layer(\n    name = "base_layer",\n    flavor = "centos8",\n)\n\n# This layer also has the flavor `centos8`.\nimage.layer(\n    name = "child_layer",\n    parent = ":base_layer",\n)\n')),Object(i.b)("p",null,"This greatly reduces the verbosity of the flavor API as we don't have\nto specify the flavor everywhere."),Object(i.b)("h2",{id:"rpms-in-inherited-flavors"},"RPMs in inherited flavors"),Object(i.b)("p",null,"Due to limitation in BUCK, we cannot read the flavor information\nfrom the BUCK target. We also cannot do file I/O in ",Object(i.b)("inlineCode",{parentName:"p"},".bzl")," to read\nthe flavor information. The flavor information is only available\nin ",Object(i.b)("inlineCode",{parentName:"p"},"python"),"."),Object(i.b)("p",null,"This creates an issue when adding installing RPMs on a layer.\nRPM installation requires that we add a dependency on BUCK targets\nin the repo snapshot to make sure we only add valid RPMs. But since\nwe don't know what the flavor is, we don't know which dependencies we need."),Object(i.b)("p",null,"The behavior we have is that we just add all dependencies for all possible\nflavors in ",Object(i.b)("inlineCode",{parentName:"p"},"REPO_CFG.flavor_to_config"),". For rpms that only available for specific\nflavors like ",Object(i.b)("inlineCode",{parentName:"p"},"centos8")," you will have to explicitly specify the flavor on ",Object(i.b)("inlineCode",{parentName:"p"},"rpms_install")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'# This layer also has the flavor `centos8`.\nimage.layer(\n    name = "child_layer",\n    parent = ":base_layer",\n    features = [\n        # RPM that is available on all flavors\n        image.rpms_install([\n            "gcc",\n        ]),\n        # RPM that is specific to `centos8`\n        image.rpms_install([\n            "dnf",\n        ], flavors = ["centos8"]),\n    ]\n)\n')),Object(i.b)("p",null,"We also have coverage checks to make sure that you have at least one (possibly empty)\n",Object(i.b)("inlineCode",{parentName:"p"},"rpms_install")," for every flavor in ",Object(i.b)("inlineCode",{parentName:"p"},"REPO_CFG.flavor_available"),". This is to make\nexplicit that no RPMs are being installed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'REPO_CFG.flavor_available = ["centos7", "centos8"]\n\n# This layer will trigger an error due to not covering `centos7` in REPO_CFG.flavor_available\nimage.layer(\n    name = "child_layer",\n    parent = ":base_layer",\n    features = [\n        # RPM that is specific to `centos8`\n        image.rpms_install([\n            "dnf",\n        ], flavors = ["centos8"]),\n    ]\n)\n\n# This layer covers all flavors and does not trigger any errors\nimage.layer(\n    name = "child_layer",\n    parent = ":base_layer",\n    features = [\n        # This makes it explicit that no RPMs are installed on `centos7`.\n        image.rpms_install([], flavors = ["centos7"]),\n        # RPM that is specific to `centos8`\n        image.rpms_install([\n            "dnf",\n        ], flavors = ["centos8"]),\n    ]\n)\n')),Object(i.b)("p",null,"When attempting to install test rpms of flavor ",Object(i.b)("inlineCode",{parentName:"p"},"antlir_test")," we have helpers in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/test_rpms"}),Object(i.b)("inlineCode",{parentName:"a"},"antlir/bzl/test_rpms.bzl")),"\nthat wrap adding the empty ",Object(i.b)("inlineCode",{parentName:"p"},"rpms_install")," to simplify the api."))}p.isMDXComponent=!0}}]);